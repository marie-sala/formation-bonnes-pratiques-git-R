---
title: Bonnes pratiques pour les projets statistiques
subtitle: |
  **[Atelier 5 du PRFS]{.orange}**
author: |
  [Romain Avouac](https://github.com/avouacr),
  [Thomas Faria](https://github.com/ThomasFaria),
  [Lino Galiana](https://www.linogaliana.fr/),
  [Olivier Meslin](https://github.com/oliviermeslin),
  [Tom Seimandi](https://github.com/tomseimandi/)
# date: 
slide-number: true
footer: |
  Bonnes pratiques pour les projets statistiques
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
# chalkboard: # press the B key to toggle chalkboard
#   theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
project:
  type: default
  output-dir: _output
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    output-file: _atelier5.html
#    embed-resources: true
controls: true
css: custom.css
from: markdown+emoji
---

# *Pipelines* de donn√©es

## Motivations

- Une analyse de donn√©es ou une cha√Æne de production font intervenir des [**√©tapes standardis√©es**]{.orange}

![](https://astrakhan.fr/wp-content/uploads/2020/10/Data-Engineering.png)

[Source](https://astrakhan.fr/blog/formation-au-data-engineering-une-nouvelle-offre-dastrakhan/)


## Motivations

- Une analyse de donn√©es ou une cha√Æne de production font intervenir des [**√©tapes standardis√©es**]{.orange}

- Ces √©tapes peuvent √™tre formalis√©es sous forme d'un [**pipeline (*direct acyclic graph*)**]{.orange}

![](img/dag_argo.png)

[Source](https://medium.com/hashmapinc/building-ml-pipelines-8e27344a42d2)

## Motivations

- Une analyse de donn√©es ou une cha√Æne de production font intervenir des [**√©tapes standardis√©es**]{.orange}

::: {.incremental}
- Mod√©liser ces √©tapes sous forme de [**pipeline (*direct acyclic graph*)**]{.orange} a plusieurs avantages :
  - [**D√©couplage**]{.blue2} des diff√©rentes √©tapes
  - Facilite la [**planification**]{.blue2} du traitement
  - Facilite la [**prise en main**]{.blue2} du projet par un tiers
:::



## Le package `targets`

- `targets` est un *framework* de mod√©lisation de *pipelines* sp√©cifiquement d√©di√© aux projets `R`.

::: {.incremental}
- Deux objectifs majeurs : 
  1. [**R√©duire le co√ªt d'exp√©rimentation**]{.orange} en sauvegardant les r√©sultats interm√©diaires (***targets***)
  2. Garantir la [**reproductibilit√©**]{.orange} de la cha√Æne en tra√ßant les changements de ces ***targets***
:::

## M√©thode de travail avec `targets` {.smaller}

- On d√©veloppe dans des scripts :
    + Fonctions dans un ou plusieurs fichiers d√©di√©s
    + Cha√Æne de production dans un fichier `_targets.R`

. . .
    
- On g√®re l'ex√©cution du _pipeline_ directement dans la console
    + `tar_visnetwork()` pour inspecter la structure du _pipeline_
    + `tar_make` pour ex√©cuter la chaine de production
    
::: {.callout-note}

Quand on part du chaine de traitement dans un fichier d√©ja existant
(`script.R` par exemple), il faut faire la transition vers un fichier
`_targets.R` dont la structure est particuli√®re.

:::

## :one: Un projet minimaliste {.smaller}

- Structure de projet _opinionated_ :
    + ~~Long script `script.R`~~ `_targets.R`
    + Cha√Æne de production: suite d'appels √† des fonctions d√©finies dans `R/functions.R`

<br>

```
‚îú‚îÄ‚îÄ _targets.R
‚îú‚îÄ‚îÄ data
‚îÇ   ‚îú‚îÄ‚îÄ raw
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ data.csv
‚îú‚îÄ‚îÄ R
‚îÇ   ‚îî‚îÄ‚îÄ functions.R
```

. . .

<br>

- Nouveau fichier: `_targets.R`
    + Contr√¥le le comportement de notre chaine de traitement
    + Encha√Ænement d'√©tapes de transformation de donn√©es selon une syntaxe particuli√®re

## :two: Le fichier `_targets.R` {.smaller}

::: {.incremental}
- Le fichier `_targets.R` doit satisfaire plusieurs conditions :
  1. Charger le _package_ `targets`
  2. Charger dans l'environnement les fonctions n√©cessaires
  3. D√©clarer les _packages_ n√©cessaires aux diff√©rentes √©tapes
  4. D√©finir le *pipeline*.
:::

. . . 

```r
# _targets.R file
library(targets)
source("R/functions.R")
tar_option_set(packages = c("readr", "dplyr", "ggplot2"))
list(
  tar_target(file, "data.csv", format = "file"),
  tar_target(data, get_data(file)),
  tar_target(model, fit_model(data)),
  tar_target(plot, plot_model(model, data))
)
```

::: {.callout-note}
Les fonctions `get_data`, `fit_model` et `plot_model` sont d√©finies
dans üìÅ `R/functions.R`
:::

## :three: Inspecter le *pipeline*

- La fonction `tar_visnetwork` permet de visualiser le *pipeline*

![](img/pipeline.png){height="350" fig-align="center"}

## :three: Ex√©cuter le *pipeline* {.smaller}

- La fonction `tar_make` ex√©cute le *pipeline* d√©fini dans `_targets.R`

![](img/pipeline_run1.png){height="200" fig-align="center"}

- üí° Lors des ex√©cutions suivantes, `targets` saute automatiquement les √©tapes qui n'ont pas chang√©

![](img/pipeline_run2.png){height="150" fig-align="center"}

## Ressources suppl√©mentaires

- La [documentation officielle de `targets`](https://books.ropensci.org/targets/)

- La [fiche UtilitR d√©di√©e √† `targets`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_targets.html)