---
title: Bonnes pratiques pour les projets statistiques
subtitle: |
  **[Atelier 3 du PRFS]{.orange}**
author: |
  [Romain Avouac](https://github.com/avouacr),
  [Thomas Faria](https://github.com/ThomasFaria),
  [Lino Galiana](https://www.linogaliana.fr/),
  [Olivier Meslin](https://github.com/oliviermeslin),
  [Tom Seimandi](https://github.com/tomseimandi/)
# date: 
slide-number: true
footer: |
  Bonnes pratiques pour les projets statistiques
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
# chalkboard: # press the B key to toggle chalkboard
#   theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    output-file: atelier3.html
#    embed-resources: true
controls: true
css: custom.css
from: markdown+emoji
---




# I- Qualit√© du code

## Enjeux

- D'une vision utilitariste du code √† une vision du code comme [**outil de communication**]{.orange}

. . .

- Favoriser la [**lisibilit√©**]{.orange} et la [**maintenabilit√©**]{.orange}

. . .

- Faciliter la [**r√©utilisation**]{.orange}

. . .

- Assurer la [__transparence__]{.orange} m√©thodologique

## Principes g√©n√©raux

1. Adopter les [**standards communautaires**]{.orange}

. . .

2. Utiliser des [**fonctions**]{.orange}

. . .

3. [**Documenter**]{.orange} son code

. . .

4. Indiquer les _packages_ utilis√©s afin d'√©viter les [**conflits**]{.orange}


## :one: Adopter les standards communautaires

> *"Un bon standard de code est comme une bonne ponctuation: on peut s'en sortir sans, mais√ßarendleschosesplusfaciles√†lire"*
>
> [Tidyverse Style Guide](https://style.tidyverse.org/)

. . .

- Respecter les [conventions]{.orange} du langage dans lequel il est r√©dig√©

. . .

- Il existe un **guide de r√©f√©rence** pour bien coder en `R` : le [Tidyverse style guide](https://style.tidyverse.org/index.html) (en anglais).


## :one: Adopter les standards communautaires {.smaller}

Deux outils pratiques aident √† respecter les standards :

1. [**_linter_**]{.orange} : programme qui v√©rifie que le code est __formellement__ conforme √† un certain _guidestyle_
    + signale probl√®mes formels, sans corriger 

. . .

2. [**_formatter_**]{.orange} : programme qui reformate un code pour le rendre conforme √† un certain _guidestyle_
    + modifie directement le code

. . .

::: {.callout-tip}

- [Exemples d‚Äôerreurs rep√©r√©es]{.blue2} par un _linter_ : 
    + lignes de code trop longues ou mal indent√©es, parenth√®ses non √©quilibr√©es, noms de fonctions mal construits‚Ä¶
- [Exemples d‚Äôerreurs __non__ rep√©r√©es]{.blue2} par un _linter_ :
    + fonctions mal utilis√©es, arguments mal sp√©cifi√©s, structure du code incoh√©rente, code insuffisamment document√©‚Ä¶
:::


## :one: Adopter les standards communautaires {.smaller}

<br>

Dans le cas de {{< fa brands r-project >}} : 

- le [_linter_]{.orange} √† utiliser est le _package_ [`lintr`](https://github.com/r-lib/lintr)
- le [_formatter_]{.orange} √† utiliser est le _package_ [`styler`](https://github.com/r-lib/styler).
    + Existe √©galement le _package_ [`formatR`](https://github.com/yihui/formatR).

## :two: Utiliser des fonctions {.smaller}

::: {.callout-important}
## R√®gle d'or

Il faut utiliser une [**fonction**]{.red2} d√®s qu'on utilise une m√™me
portion de code plus de deux fois ([**_ne te r√©p√®te pas_**]{.red2})
:::

- [Limite les risques d'erreurs]{.orange} li√©s aux copier/coller
- Rend le code [plus lisible]{.orange} et [plus compact]{.orange}
- [Un seul endroit]{.orange} du code √† modifier lorsqu'on souhaite modifier le traitement
- Facilite la [r√©utilisation]{.orange} et la [documentation]{.orange} du code !

. . .

::: {.callout-tip}
## R√®gles pour √©crire des fonctions **pertinentes**

- Une t√¢che = une fonction
- Une t√¢che complexe = un encha√Ænement de fonctions r√©alisant chacune une t√¢che simple

:::

## :three: Documenter son code

- Grands principes :
  - Documenter le [__pourquoi__]{.orange} plut√¥t que le [__comment__]{.orange}
  - Privil√©gier l'auto-documentation via des [**nommages pertinents**]{.orange}.

. . .

::: {.callout-tip}
## Comment bien documenter un script ?

- [**Minimum**]{.orange} üö¶ : commentaire au d√©but du script pour d√©crire ce qu'il fait
- [**Bien**]{.orange} üëç : commenter les parties "d√©licates" du code
- [**Id√©al**]{.orange} üí™ : documenter ses fonctions avec la syntaxe `roxygen2`.

:::


## :four: Pas d'ambigu√Øt√© sur les _packages_ utilis√©s {.smaller}

- Deux fonctions peuvent avoir le [__m√™me nom__]{.orange} dans des [__packages diff√©rents__]{.orange}

. . .

- `R` utilise par d√©faut la librairie charg√©e le plus r√©cemment

. . .

- Erreurs difficiles √† rep√©rer car il est n√©cessaire d'ex√©cuter le code

. . .

- Recommandation : indiquer explicitement le _package_ : notation `package::fonction()`
    + Exemple : `dplyr::filter()`

:::{.callout-tip}
## Exemple
- `package1` et `package2` contiennent chacun une fonction appel√©e `superFonction`.
- Si `package2` est charg√© apr√®s `package1`, alors `superFonction` d√©signe par d√©faut la fonction de `package2`.
- Mieux vaut noter `package1::superFonction` et `package2::superFonction`
:::


## Ressources suppl√©mentaires

<br>

- [Un cours complet](https://eliocamp.github.io/reproducibility-with-r/) sur la reproductibilit√© avec `R` (en anglais)
- Une [pr√©sentation tr√®s compl√®te](https://mitmat.github.io/slides/2022-05-26-egu/code-data-open-science.html#1) sur le partage de code et de donn√©es avec `R` (en anglais)
- L'√©quivalent `Python` en [3A d'ENSAE](https://ensae-reproductibilite.github.io/website/)


